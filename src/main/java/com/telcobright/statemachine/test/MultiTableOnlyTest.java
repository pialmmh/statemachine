package com.telcobright.statemachine.test;

import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.splitverse.config.ShardConfig;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.core.repository.GenericMultiTableRepository;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.annotation.*;

import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

/**
 * Simple test specifically for MULTI_TABLE mode
 */
public class MultiTableOnlyTest {

    @Table(name = "messages")
    public static class MessageEntity implements ShardingEntity {

        @Id(autoGenerated = false)
        @Column(name = "msg_id")
        private String id;

        @com.telcobright.core.annotation.ShardingKey
        @Column(name = "created_at")
        private LocalDateTime createdAt;

        @Column(name = "content")
        private String content;

        @Column(name = "sender")
        private String sender;

        public MessageEntity() {}

        @Override
        public String getId() { return id; }

        @Override
        public void setId(String id) { this.id = id; }

        @Override
        public LocalDateTime getCreatedAt() { return createdAt; }

        @Override
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

        public String getContent() { return content; }
        public void setContent(String content) { this.content = content; }

        public String getSender() { return sender; }
        public void setSender(String sender) { this.sender = sender; }
    }

    public static void main(String[] args) {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("   MULTI_TABLE MODE ONLY TEST");
        System.out.println("   Creating separate tables for each day");
        System.out.println("=".repeat(80));
        System.out.println();

        ShardConfig config = ShardConfig.builder()
            .shardId("primary")
            .host("127.0.0.1")
            .port(3306)
            .database("statemachine_test")
            .username("root")
            .password("123456")
            .connectionPoolSize(10)
            .enabled(true)
            .build();

        SplitVerseRepository<MessageEntity> repository = null;

        try {
            System.out.println("üìã Creating MULTI_TABLE mode repository...");
            System.out.println("   Repository Mode: MULTI_TABLE");
            System.out.println("   Table Granularity: DAILY");
            System.out.println("   Expected tables: messages_2025_09_14, messages_2025_09_13, etc.");
            System.out.println();

            // Try to create repository with MULTI_TABLE mode
            repository = SplitVerseRepository.<MessageEntity>builder()
                .withSingleShard(config)
                .withEntityClass(MessageEntity.class)
                .withRepositoryMode(RepositoryMode.MULTI_TABLE)
                .withTableGranularity(GenericMultiTableRepository.TableGranularity.DAILY)
                .withRetentionDays(3)  // Just 3 days for testing
                .build();

            System.out.println("‚úÖ Repository created successfully");

            // Insert test data
            System.out.println("\nüìù Inserting test data...");
            LocalDateTime now = LocalDateTime.now();

            // Today's data
            MessageEntity msg1 = new MessageEntity();
            msg1.setId("MSG-" + UUID.randomUUID().toString().substring(0, 8));
            msg1.setCreatedAt(now);
            msg1.setContent("Message for today");
            msg1.setSender("user1");
            repository.insert(msg1);
            System.out.println("   Inserted: " + msg1.getId() + " at " +
                msg1.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));

            // Yesterday's data
            MessageEntity msg2 = new MessageEntity();
            msg2.setId("MSG-" + UUID.randomUUID().toString().substring(0, 8));
            msg2.setCreatedAt(now.minusDays(1));
            msg2.setContent("Message for yesterday");
            msg2.setSender("user2");
            repository.insert(msg2);
            System.out.println("   Inserted: " + msg2.getId() + " at " +
                msg2.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));

            // Two days ago
            MessageEntity msg3 = new MessageEntity();
            msg3.setId("MSG-" + UUID.randomUUID().toString().substring(0, 8));
            msg3.setCreatedAt(now.minusDays(2));
            msg3.setContent("Message for 2 days ago");
            msg3.setSender("user3");
            repository.insert(msg3);
            System.out.println("   Inserted: " + msg3.getId() + " at " +
                msg3.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));

            System.out.println("\n‚úÖ Data insertion completed");

            // Verify retrieval
            System.out.println("\nüîç Verifying data retrieval...");
            MessageEntity retrieved = repository.findById(msg1.getId());
            if (retrieved != null) {
                System.out.println("   ‚úÖ Retrieved message: " + retrieved.getContent());
            }

            // Show database tables
            System.out.println("\nüìä Database tables created:");
            showTables(config);

        } catch (Exception e) {
            System.err.println("\n‚ùå Error: " + e.getMessage());
            e.printStackTrace();

            // Try to show what tables exist anyway
            System.out.println("\nüìä Current database tables:");
            showTables(config);
        } finally {
            if (repository != null) {
                repository.shutdown();
                System.out.println("\n‚úÖ Repository shut down");
            }
        }

        System.out.println("\n" + "=".repeat(80));
        System.out.println("   TEST COMPLETED");
        System.out.println("=".repeat(80));
    }

    private static void showTables(ShardConfig config) {
        String jdbcUrl = String.format("jdbc:mysql://%s:%d/%s?useSSL=false&serverTimezone=UTC",
            config.getHost(), config.getPort(), config.getDatabase());

        try (Connection conn = DriverManager.getConnection(jdbcUrl, config.getUsername(), config.getPassword())) {
            String query = "SELECT TABLE_NAME, TABLE_ROWS, DATA_LENGTH " +
                          "FROM information_schema.TABLES " +
                          "WHERE TABLE_SCHEMA = ? AND TABLE_NAME LIKE 'messages%' " +
                          "ORDER BY TABLE_NAME";

            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, config.getDatabase());
            ResultSet rs = pstmt.executeQuery();

            System.out.println("   Table Name              | Rows | Size (KB)");
            System.out.println("   " + "-".repeat(50));
            int count = 0;
            while (rs.next()) {
                System.out.printf("   %-23s | %4d | %9.2f%n",
                    rs.getString("TABLE_NAME"),
                    rs.getLong("TABLE_ROWS"),
                    rs.getLong("DATA_LENGTH") / 1024.0);
                count++;
            }
            if (count == 0) {
                System.out.println("   No 'messages' tables found");
            }
        } catch (SQLException e) {
            System.err.println("   Error checking tables: " + e.getMessage());
        }
    }
}