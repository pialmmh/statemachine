package com.telcobright.statemachine.persistence;

import com.telcobright.statemachine.StateMachineContextEntity;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.annotation.*;

import java.time.LocalDateTime;
import java.io.Serializable;

/**
 * Base class for StateMachine entities that work with Split-Verse persistence
 * Implements both StateMachineContextEntity and ShardingEntity interfaces
 */
public abstract class SplitVerseStateMachineEntity implements StateMachineContextEntity<String>, ShardingEntity, Serializable {

    @Id(autoGenerated = false)
    @Column(name = "machine_id")
    protected String id;

    @ShardingKey
    @Column(name = "created_at")
    protected LocalDateTime createdAt;

    @Column(name = "current_state")
    protected String currentState;

    @Column(name = "last_state_change")
    protected LocalDateTime lastStateChange;

    @Column(name = "is_complete")
    protected boolean isComplete;

    @Column(name = "updated_at")
    protected LocalDateTime updatedAt;

    @Column(name = "event_count")
    protected int eventCount;

    @Column(name = "last_event")
    protected String lastEvent;

    // Default constructor
    public SplitVerseStateMachineEntity() {
        this.createdAt = LocalDateTime.now();
        this.lastStateChange = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
        this.isComplete = false;
        this.eventCount = 0;
    }

    // Constructor with ID
    public SplitVerseStateMachineEntity(String id) {
        this();
        this.id = id;
    }

    // Implementation of ShardingEntity interface
    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    @Override
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    @Override
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // Implementation of StateMachineContextEntity interface
    @Override
    public String getCurrentState() {
        return currentState;
    }

    @Override
    public void setCurrentState(String currentState) {
        this.currentState = currentState;
        this.lastStateChange = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    @Override
    public LocalDateTime getLastStateChange() {
        return lastStateChange;
    }

    @Override
    public void setLastStateChange(LocalDateTime lastStateChange) {
        this.lastStateChange = lastStateChange;
        this.updatedAt = LocalDateTime.now();
    }

    @Override
    public boolean isComplete() {
        return isComplete;
    }

    @Override
    public void setComplete(boolean complete) {
        this.isComplete = complete;
        this.updatedAt = LocalDateTime.now();
    }

    // Additional getters and setters
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public int getEventCount() {
        return eventCount;
    }

    public void setEventCount(int eventCount) {
        this.eventCount = eventCount;
        this.updatedAt = LocalDateTime.now();
    }

    public void incrementEventCount() {
        this.eventCount++;
        this.updatedAt = LocalDateTime.now();
    }

    public String getLastEvent() {
        return lastEvent;
    }

    public void setLastEvent(String lastEvent) {
        this.lastEvent = lastEvent;
        this.updatedAt = LocalDateTime.now();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" +
                "id='" + id + '\'' +
                ", currentState='" + currentState + '\'' +
                ", createdAt=" + createdAt +
                ", lastStateChange=" + lastStateChange +
                ", isComplete=" + isComplete +
                ", eventCount=" + eventCount +
                ", lastEvent='" + lastEvent + '\'' +
                '}';
    }
}