package com.telcobright.statewalk.test_multientity.entities;

import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.annotation.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Call entity implementing ShardingEntity with machine ID consistency
 */
@Table(name = "call_entities")
public class CallEntity implements ShardingEntity {

    @Id(autoGenerated = false)
    @Column(name = "id")
    private String id; // MUST be same as machine ID

    @ShardingKey
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "caller_number")
    private String callerNumber;

    @Column(name = "callee_number")
    private String calleeNumber;

    @Column(name = "start_time")
    private LocalDateTime startTime;

    @Column(name = "end_time")
    private LocalDateTime endTime;

    @Column(name = "call_status")
    private String callStatus;

    @Column(name = "duration_seconds")
    private Integer durationSeconds;

    @Entity(table = "call_events", relation = RelationType.ONE_TO_MANY)
    private List<CallEventEntity> events = new ArrayList<>();

    // Reference to singleton DeviceInfo (will have same machine ID)
    private transient DeviceInfoEntity deviceInfo;

    public CallEntity() {
        this.createdAt = LocalDateTime.now();
        this.startTime = LocalDateTime.now();
        this.callStatus = "INITIATED";
    }

    public CallEntity(String machineId) {
        this();
        this.id = machineId; // Set to machine ID
    }

    // ShardingEntity implementation
    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
        // Propagate ID to child events
        if (events != null) {
            for (CallEventEntity event : events) {
                event.setCallId(id);
            }
        }
    }

    @Override
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    @Override
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // Event management
    public void addEvent(CallEventEntity event) {
        if (events == null) {
            events = new ArrayList<>();
        }
        event.setCallId(this.id); // Ensure event references machine ID
        events.add(event);
    }

    // Getters and setters
    public String getCallerNumber() {
        return callerNumber;
    }

    public void setCallerNumber(String callerNumber) {
        this.callerNumber = callerNumber;
    }

    public String getCalleeNumber() {
        return calleeNumber;
    }

    public void setCalleeNumber(String calleeNumber) {
        this.calleeNumber = calleeNumber;
    }

    public LocalDateTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    public LocalDateTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
        if (startTime != null && endTime != null) {
            this.durationSeconds = (int) java.time.Duration.between(startTime, endTime).getSeconds();
        }
    }

    public String getCallStatus() {
        return callStatus;
    }

    public void setCallStatus(String callStatus) {
        this.callStatus = callStatus;
    }

    public Integer getDurationSeconds() {
        return durationSeconds;
    }

    public void setDurationSeconds(Integer durationSeconds) {
        this.durationSeconds = durationSeconds;
    }

    public List<CallEventEntity> getEvents() {
        return events;
    }

    public void setEvents(List<CallEventEntity> events) {
        this.events = events;
        // Ensure all events have correct call ID
        if (events != null && this.id != null) {
            for (CallEventEntity event : events) {
                event.setCallId(this.id);
            }
        }
    }

    public DeviceInfoEntity getDeviceInfo() {
        return deviceInfo;
    }

    public void setDeviceInfo(DeviceInfoEntity deviceInfo) {
        this.deviceInfo = deviceInfo;
        // Ensure device info has same machine ID
        if (deviceInfo != null && this.id != null) {
            deviceInfo.setId(this.id);
        }
    }
}