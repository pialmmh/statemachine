package com.telcobright.statewalk.test_multientity.entities;

import com.telcobright.statemachine.StateMachineContextEntity;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.annotation.*;
import java.time.LocalDateTime;

/**
 * CallMachineContext - Root context that ensures ID consistency across all entities
 * All child entities MUST share the same machine ID
 */
@Table(name = "call_machine_contexts")
public class CallMachineContext extends StateMachineContextEntity<String> implements ShardingEntity {

    @Id(autoGenerated = false)
    @Column(name = "id")
    private String machineId; // The machine ID that all entities share

    @ShardingKey
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Entity(table = "call_entities", relation = RelationType.ONE_TO_ONE)
    private CallEntity call;

    @Entity(table = "cdr_entities", relation = RelationType.ONE_TO_ONE)
    private CdrEntity cdr;

    @Entity(table = "bill_info_entities", relation = RelationType.ONE_TO_ONE)
    private BillInfoEntity billInfo;

    @Singleton(key = "device_info")
    @Entity(table = "device_info_entities")
    private DeviceInfoEntity deviceInfo;

    public CallMachineContext() {
        super();
        this.createdAt = LocalDateTime.now();
    }

    public CallMachineContext(String machineId) {
        this();
        setMachineId(machineId);
        initializeEntities();
    }

    /**
     * Initialize all entities with the same machine ID
     */
    public void initializeEntities() {
        if (machineId == null) {
            throw new IllegalStateException("Machine ID must be set before initializing entities");
        }

        // Create all entities with the same machine ID
        this.call = new CallEntity(machineId);
        this.cdr = new CdrEntity(machineId);
        this.billInfo = new BillInfoEntity(machineId);
        this.deviceInfo = new DeviceInfoEntity(machineId);

        // Ensure singleton device info is shared
        this.call.setDeviceInfo(this.deviceInfo);
        this.billInfo.setDeviceInfo(this.deviceInfo);
    }

    /**
     * Set machine ID and propagate to all entities
     */
    public void setMachineId(String machineId) {
        this.machineId = machineId;
        super.setId(machineId); // Set parent class ID

        // Propagate ID to all entities
        if (call != null) {
            call.setId(machineId);
        }
        if (cdr != null) {
            cdr.setId(machineId);
        }
        if (billInfo != null) {
            billInfo.setId(machineId);
        }
        if (deviceInfo != null) {
            deviceInfo.setId(machineId);
        }
    }

    /**
     * Validate ID consistency across all entities
     */
    public boolean validateIdConsistency() {
        if (machineId == null) {
            return false;
        }

        // Check all primary entities have same ID
        if (call != null && !machineId.equals(call.getId())) {
            return false;
        }
        if (cdr != null && !machineId.equals(cdr.getId())) {
            return false;
        }
        if (billInfo != null && !machineId.equals(billInfo.getId())) {
            return false;
        }
        if (deviceInfo != null && !machineId.equals(deviceInfo.getId())) {
            return false;
        }

        // Check child entity references
        if (call != null && call.getEvents() != null) {
            for (CallEventEntity event : call.getEvents()) {
                if (!machineId.equals(event.getCallId())) {
                    return false;
                }
            }
        }
        if (billInfo != null && billInfo.getParty() != null) {
            if (!machineId.equals(billInfo.getParty().getBillId())) {
                return false;
            }
        }

        return true;
    }

    // ShardingEntity implementation
    @Override
    public String getId() {
        return machineId;
    }

    @Override
    public void setId(String id) {
        setMachineId(id);
    }

    @Override
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    @Override
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // Getters and setters
    public String getMachineId() {
        return machineId;
    }

    public CallEntity getCall() {
        return call;
    }

    public void setCall(CallEntity call) {
        this.call = call;
        if (call != null && machineId != null) {
            call.setId(machineId);
            call.setDeviceInfo(this.deviceInfo);
        }
    }

    public CdrEntity getCdr() {
        return cdr;
    }

    public void setCdr(CdrEntity cdr) {
        this.cdr = cdr;
        if (cdr != null && machineId != null) {
            cdr.setId(machineId);
        }
    }

    public BillInfoEntity getBillInfo() {
        return billInfo;
    }

    public void setBillInfo(BillInfoEntity billInfo) {
        this.billInfo = billInfo;
        if (billInfo != null && machineId != null) {
            billInfo.setId(machineId);
            billInfo.setDeviceInfo(this.deviceInfo);
        }
    }

    public DeviceInfoEntity getDeviceInfo() {
        return deviceInfo;
    }

    public void setDeviceInfo(DeviceInfoEntity deviceInfo) {
        this.deviceInfo = deviceInfo;
        if (deviceInfo != null && machineId != null) {
            deviceInfo.setId(machineId);
        }
        // Share with other entities
        if (call != null) {
            call.setDeviceInfo(deviceInfo);
        }
        if (billInfo != null) {
            billInfo.setDeviceInfo(deviceInfo);
        }
    }

    @Override
    public String toString() {
        return String.format("CallMachineContext[id=%s, state=%s, call=%s, cdr=%s, billInfo=%s, device=%s, consistent=%s]",
            machineId, getCurrentState(),
            call != null ? "present" : "null",
            cdr != null ? "present" : "null",
            billInfo != null ? "present" : "null",
            deviceInfo != null ? deviceInfo.getDeviceType() : "null",
            validateIdConsistency());
    }
}